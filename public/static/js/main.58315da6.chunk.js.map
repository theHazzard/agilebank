{"version":3,"sources":["components/Header.js","store.js","components/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["Header","client","amount","className","style","textAlign","width","height","backgroundColor","src","Date","now","color","Store","React","createContext","initialState","version","account","movements","reducer","state","action","type","payload","StoreProvider","props","useReducer","value","dispatch","Provider","children","Transactions","transactions","typeRef","useRef","amountRef","useContext","console","log","useState","selected","setSelected","length","map","transaction","i","onClick","class","ref","placeholder","e","preventDefault","current","fetch","method","body","JSON","stringify","headers","then","App","trigger","useEffect","Promise","all","response","json","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58315da6.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header({client, amount}) {\n  return (\n    <header className=\"column is-narrow\" style={{textAlign: 'center', width: 250, height: '100vh', backgroundColor: 'currentColor'}}>\n      <img src={`https://api.adorable.io/avatars/285/${+(Date.now())}.png`} />\n      <h3 className=\"is-size-3\" style={{color: 'white'}}>{client}</h3>\n      <p style={{color: 'white'}}>{amount}</p>\n    </header>\n  )\n}\n","\nimport React from 'react'\n\nexport const Store = React.createContext();\n\nconst initialState = {\n  version: 0,\n  account: {},\n  movements: []\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE':\n      return { ...state, ...action.payload };\n    case 'FORCE_UPDATE':\n      const _state = { ...state, version: state.version + 1 };\n      debugger;\n      return _state;\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}","import React, { useState, useRef } from 'react'\nimport {Store} from '../store';\n\n\nexport default function Transactions({ transactions }) {\n  const typeRef = useRef();\n  const amountRef = useRef();\n  const { state, dispatch } = React.useContext(Store);\n\n  console.log(transactions);\n  function onClick (e) {\n    e.preventDefault();\n    const type = typeRef.current.value;\n    const amount = amountRef.current.value;\n    fetch('http://127.0.0.1:4000/api/transactions', {\n      method: 'POST', // or 'PUT'\n      body: JSON.stringify({\n        type,\n        amount,\n      }), // data can be `string` or {object}!\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(() => dispatch({\n      type: 'FORCE_UPDATE',\n      payload: [],\n    }));\n  }\n  const [selected, setSelected] = useState(null);\n  return (\n    <section className=\"container\">\n      <section className=\"accordions\">\n        {\n          (!transactions || transactions?.length === 0) &&\n          (<p className=\"is-size-4\">No movements have been done yet.</p>)\n        }\n        {transactions?.map((transaction, i) => (\n          <article className={`accordion ${selected === i && 'is-active'}`}>\n            <div className=\"accordion-header toggle\" onClick={() => setSelected(i)} style={{textAlign: 'center', color: transactions.type === 'credit' ? 'green' : 'red'}}>\n              $ {transaction.amount}\n            </div>\n            <div class=\"accordion-body\">\n              <div class=\"accordion-content\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Pellentesque risus mi</strong>, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum <a>felis venenatis</a> efficitur. Aenean ac <em>eleifend lacus</em>, in mollis lectus. Donec sodales, arcu et sollicitudin porttitor, tortor urna tempor ligula, id porttitor mi magna a neque. Donec dui urna, vehicula et sem eget, facilisis sodales sem.\n                </div>\n            </div>\n          </article>\n        ))}\n      </section>\n      <section>\n        <div class=\"field has-addons\">\n          <p class=\"control\">\n            <span class=\"select\">\n              <select ref={typeRef}>\n                <option value=\"credit\">Add</option>\n                <option value=\"debit\">Extract</option>\n              </select>\n            </span>\n          </p>\n          <p class=\"control is-expanded\">\n            <input ref={amountRef} class=\"input\" type=\"text\" placeholder=\"Amount of money\" />\n          </p>\n          <p class=\"control\">\n            <a class=\"button\" onClick={onClick}>\n              Transfer\n            </a>\n          </p>\n        </div>\n      </section>\n      </section>\n  )\n}\n","import React, {useEffect, useContext} from 'react';\nimport Header from './components/Header';\nimport Transactions from './components/Transactions';\nimport {Store} from './store';\n\nimport './App.css';\n\nfunction App() {\n  const { state, dispatch } = React.useContext(Store);\n  const trigger = state ? state.version : 0;\n  useEffect(() =>  {\n    Promise.all([\n      fetch('http://127.0.0.1:4000/api/account')\n        .then(function(response) {\n          return response.json();\n        }),\n      fetch('http://127.0.0.1:4000/api/transactions')\n        .then(function(response) {\n          return response.json();\n        })\n    ]).then(([account, transactions]) =>\n      dispatch({\n        type: 'UPDATE',\n        payload: {\n          account,\n          movements: transactions\n        },\n      }));\n    \n    return () => {};\n  }, [trigger])\n  \n  const {name, amount} = state?.account;\n  const {movements} = state;\n\n  return (\n    <div className=\"columns\">\n      <Header client={name} amount={amount} />\n      <section className=\"column\">\n        <Transactions transactions={movements}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {StoreProvider} from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}